package example.micronaut.txwithr2dbc.shared.config

import example.micronaut.txwithr2dbc.shared.MdcPropagationContext
import example.micronaut.txwithr2dbc.shared.config.Headers.REQUEST_ID
import io.micronaut.core.propagation.PropagatedContext
import io.micronaut.http.HttpRequest
import io.micronaut.http.MutableHttpResponse
import io.micronaut.http.annotation.Filter
import io.micronaut.http.annotation.Filter.MATCH_ALL_PATTERN
import io.micronaut.http.filter.HttpServerFilter
import io.micronaut.http.filter.ServerFilterChain
import org.reactivestreams.Publisher
import org.slf4j.MDC
import java.util.UUID


@Filter(MATCH_ALL_PATTERN)
class MdcLegacyFilter : HttpServerFilter {

    override fun doFilter(request: HttpRequest<*>?, chain: ServerFilterChain): Publisher<MutableHttpResponse<*>> {
        return request?.let {
            try {
                val requestId = request.headers.get(REQUEST_ID) ?: UUID.randomUUID().toString()
                val httpPath = request.path
                val httpMethod = request.method

                MDC.put("requestId", requestId)
                MDC.put("httpPath", httpPath)
                MDC.put("httpMethod", httpMethod.toString())

                PropagatedContext.get().plus(MdcPropagationContext()).propagate().use {
                    chain.proceed(request)
                }
            } finally {
                MDC.remove("requestId")
                MDC.remove("httpPath")
                MDC.remove("httpMethod")
            }
        } ?: chain.proceed(request)
    }
}